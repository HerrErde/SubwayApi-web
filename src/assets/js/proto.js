// source: player.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck


goog.provide('proto.player.ext.v1.CreatePlayerRequest');
goog.provide('proto.player.ext.v1.Empty');
goog.provide('proto.player.ext.v1.GetFriendAndInvitesResponse');
goog.provide('proto.player.ext.v1.GetFriendsResponse');
goog.provide('proto.player.ext.v1.GetInvitesResponse');
goog.provide('proto.player.ext.v1.GetWalletResponse');
goog.provide('proto.player.ext.v1.GetWalletResponse.WalletData');
goog.provide('proto.player.ext.v1.InviteQuota');
goog.provide('proto.player.ext.v1.InviteUserUuid');
goog.provide('proto.player.ext.v1.MatchPlayerResponse');
goog.provide('proto.player.ext.v1.PlayerRequest');
goog.provide('proto.player.ext.v1.PlayerResponse');
goog.provide('proto.player.ext.v1.ReceivedInvite');
goog.provide('proto.player.ext.v1.SendInvite');
goog.provide('proto.player.ext.v1.SendInviteResponse');
goog.provide('proto.player.ext.v1.SendInviteResponse.UserInvite');
goog.provide('proto.player.ext.v1.StatusResponse');
goog.provide('proto.player.ext.v1.StatusResponse.Status');
goog.provide('proto.player.ext.v1.Time');
goog.provide('proto.player.ext.v1.UpdatePlayerRequest');
goog.provide('proto.player.ext.v1.UserData');
goog.provide('proto.player.ext.v1.UserInfo');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.Empty.displayName = 'proto.player.ext.v1.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.Time = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.Time.displayName = 'proto.player.ext.v1.Time';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.InviteQuota = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.InviteQuota, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.InviteQuota.displayName = 'proto.player.ext.v1.InviteQuota';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.PlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.PlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.PlayerRequest.displayName = 'proto.player.ext.v1.PlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.UserInfo.displayName = 'proto.player.ext.v1.UserInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.CreatePlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.CreatePlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.CreatePlayerRequest.displayName = 'proto.player.ext.v1.CreatePlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.UserData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.UserData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.UserData.displayName = 'proto.player.ext.v1.UserData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.PlayerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.PlayerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.PlayerResponse.displayName = 'proto.player.ext.v1.PlayerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.InviteUserUuid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.InviteUserUuid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.InviteUserUuid.displayName = 'proto.player.ext.v1.InviteUserUuid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.ReceivedInvite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.ReceivedInvite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.ReceivedInvite.displayName = 'proto.player.ext.v1.ReceivedInvite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.SendInvite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.SendInvite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.SendInvite.displayName = 'proto.player.ext.v1.SendInvite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.GetInvitesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.player.ext.v1.GetInvitesResponse.repeatedFields_, null);
};
goog.inherits(proto.player.ext.v1.GetInvitesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.GetInvitesResponse.displayName = 'proto.player.ext.v1.GetInvitesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.SendInviteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.SendInviteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.SendInviteResponse.displayName = 'proto.player.ext.v1.SendInviteResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.SendInviteResponse.UserInvite = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.SendInviteResponse.UserInvite, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.SendInviteResponse.UserInvite.displayName = 'proto.player.ext.v1.SendInviteResponse.UserInvite';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.GetFriendsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.player.ext.v1.GetFriendsResponse.repeatedFields_, null);
};
goog.inherits(proto.player.ext.v1.GetFriendsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.GetFriendsResponse.displayName = 'proto.player.ext.v1.GetFriendsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.UpdatePlayerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.UpdatePlayerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.UpdatePlayerRequest.displayName = 'proto.player.ext.v1.UpdatePlayerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.StatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.StatusResponse.displayName = 'proto.player.ext.v1.StatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.StatusResponse.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.StatusResponse.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.StatusResponse.Status.displayName = 'proto.player.ext.v1.StatusResponse.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.GetWalletResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.GetWalletResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.GetWalletResponse.displayName = 'proto.player.ext.v1.GetWalletResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.GetWalletResponse.WalletData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.player.ext.v1.GetWalletResponse.WalletData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.GetWalletResponse.WalletData.displayName = 'proto.player.ext.v1.GetWalletResponse.WalletData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.GetFriendAndInvitesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.player.ext.v1.GetFriendAndInvitesResponse.repeatedFields_, null);
};
goog.inherits(proto.player.ext.v1.GetFriendAndInvitesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.GetFriendAndInvitesResponse.displayName = 'proto.player.ext.v1.GetFriendAndInvitesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.player.ext.v1.MatchPlayerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.player.ext.v1.MatchPlayerResponse.repeatedFields_, null);
};
goog.inherits(proto.player.ext.v1.MatchPlayerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.player.ext.v1.MatchPlayerResponse.displayName = 'proto.player.ext.v1.MatchPlayerResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.Empty}
 */
proto.player.ext.v1.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.Empty;
  return proto.player.ext.v1.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.Empty}
 */
proto.player.ext.v1.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.Time.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.Time.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.Time} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.Time.toObject = function(includeInstance, msg) {
  var f, obj = {
sec: jspb.Message.getFieldWithDefault(msg, 1, 0),
nsec: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.Time}
 */
proto.player.ext.v1.Time.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.Time;
  return proto.player.ext.v1.Time.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.Time}
 */
proto.player.ext.v1.Time.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNsec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.Time.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.Time.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.Time.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSec();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNsec();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 sec = 1;
 * @return {number}
 */
proto.player.ext.v1.Time.prototype.getSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.Time} returns this
 */
proto.player.ext.v1.Time.prototype.setSec = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 nsec = 2;
 * @return {number}
 */
proto.player.ext.v1.Time.prototype.getNsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.Time} returns this
 */
proto.player.ext.v1.Time.prototype.setNsec = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.InviteQuota.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.InviteQuota.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.InviteQuota} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.InviteQuota.toObject = function(includeInstance, msg) {
  var f, obj = {
maxFriends: jspb.Message.getFieldWithDefault(msg, 1, 0),
friendCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
sendInviteCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
receivedInviteCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
maxInvites: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.InviteQuota}
 */
proto.player.ext.v1.InviteQuota.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.InviteQuota;
  return proto.player.ext.v1.InviteQuota.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.InviteQuota} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.InviteQuota}
 */
proto.player.ext.v1.InviteQuota.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxFriends(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFriendCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSendInviteCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReceivedInviteCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxInvites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.InviteQuota.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.InviteQuota.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.InviteQuota} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.InviteQuota.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxFriends();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFriendCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSendInviteCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getReceivedInviteCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMaxInvites();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 max_friends = 1;
 * @return {number}
 */
proto.player.ext.v1.InviteQuota.prototype.getMaxFriends = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.InviteQuota} returns this
 */
proto.player.ext.v1.InviteQuota.prototype.setMaxFriends = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 friend_count = 2;
 * @return {number}
 */
proto.player.ext.v1.InviteQuota.prototype.getFriendCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.InviteQuota} returns this
 */
proto.player.ext.v1.InviteQuota.prototype.setFriendCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 send_invite_count = 3;
 * @return {number}
 */
proto.player.ext.v1.InviteQuota.prototype.getSendInviteCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.InviteQuota} returns this
 */
proto.player.ext.v1.InviteQuota.prototype.setSendInviteCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 received_invite_count = 4;
 * @return {number}
 */
proto.player.ext.v1.InviteQuota.prototype.getReceivedInviteCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.InviteQuota} returns this
 */
proto.player.ext.v1.InviteQuota.prototype.setReceivedInviteCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 max_invites = 5;
 * @return {number}
 */
proto.player.ext.v1.InviteQuota.prototype.getMaxInvites = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.InviteQuota} returns this
 */
proto.player.ext.v1.InviteQuota.prototype.setMaxInvites = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.PlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.PlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.PlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.PlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
player: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.PlayerRequest}
 */
proto.player.ext.v1.PlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.PlayerRequest;
  return proto.player.ext.v1.PlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.PlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.PlayerRequest}
 */
proto.player.ext.v1.PlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.PlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.PlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.PlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.PlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string player = 1;
 * @return {string}
 */
proto.player.ext.v1.PlayerRequest.prototype.getPlayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.PlayerRequest} returns this
 */
proto.player.ext.v1.PlayerRequest.prototype.setPlayer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
userData: (f = msg.getUserData()) && proto.player.ext.v1.UserData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.UserInfo}
 */
proto.player.ext.v1.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.UserInfo;
  return proto.player.ext.v1.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.UserInfo}
 */
proto.player.ext.v1.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.player.ext.v1.UserData;
      reader.readMessage(value,proto.player.ext.v1.UserData.deserializeBinaryFromReader);
      msg.setUserData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.player.ext.v1.UserData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.player.ext.v1.UserInfo.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.UserInfo} returns this
 */
proto.player.ext.v1.UserInfo.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UserData user_data = 2;
 * @return {?proto.player.ext.v1.UserData}
 */
proto.player.ext.v1.UserInfo.prototype.getUserData = function() {
  return /** @type{?proto.player.ext.v1.UserData} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.UserData, 2));
};


/**
 * @param {?proto.player.ext.v1.UserData|undefined} value
 * @return {!proto.player.ext.v1.UserInfo} returns this
*/
proto.player.ext.v1.UserInfo.prototype.setUserData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.UserInfo} returns this
 */
proto.player.ext.v1.UserInfo.prototype.clearUserData = function() {
  return this.setUserData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.UserInfo.prototype.hasUserData = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.CreatePlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.CreatePlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.CreatePlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
selectedBoard: jspb.Message.getFieldWithDefault(msg, 26, ""),
selectedBoardUpgrades: jspb.Message.getFieldWithDefault(msg, 34, ""),
selectedCharacter: jspb.Message.getFieldWithDefault(msg, 18, ""),
selectedCountry: jspb.Message.getFieldWithDefault(msg, 42, ""),
selectedBackground: jspb.Message.getFieldWithDefault(msg, 50, ""),
selectedFrame: jspb.Message.getFieldWithDefault(msg, 58, ""),
selectedPortrait: jspb.Message.getFieldWithDefault(msg, 66, ""),
statTotalVisitedDestinations: jspb.Message.getFieldWithDefault(msg, 76, 0),
statTotalGames: jspb.Message.getFieldWithDefault(msg, 80, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.CreatePlayerRequest}
 */
proto.player.ext.v1.CreatePlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.CreatePlayerRequest;
  return proto.player.ext.v1.CreatePlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.CreatePlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.CreatePlayerRequest}
 */
proto.player.ext.v1.CreatePlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectedBoard(value);
      break;
    case 34:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectedBoardUpgrades(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectedCharacter(value);
      break;
    case 42:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectedCountry(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectedBackground(value);
      break;
    case 58:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectedFrame(value);
      break;
    case 66:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelectedPortrait(value);
      break;
    case 76:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatTotalVisitedDestinations(value);
      break;
    case 80:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatTotalGames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.CreatePlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.CreatePlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.CreatePlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSelectedBoard();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getSelectedBoardUpgrades();
  if (f.length > 0) {
    writer.writeString(
      34,
      f
    );
  }
  f = message.getSelectedCharacter();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getSelectedCountry();
  if (f.length > 0) {
    writer.writeString(
      42,
      f
    );
  }
  f = message.getSelectedBackground();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
  f = message.getSelectedFrame();
  if (f.length > 0) {
    writer.writeString(
      58,
      f
    );
  }
  f = message.getSelectedPortrait();
  if (f.length > 0) {
    writer.writeString(
      66,
      f
    );
  }
  f = message.getStatTotalVisitedDestinations();
  if (f !== 0) {
    writer.writeInt32(
      76,
      f
    );
  }
  f = message.getStatTotalGames();
  if (f !== 0) {
    writer.writeInt32(
      80,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.CreatePlayerRequest} returns this
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string selected_board = 26;
 * @return {string}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.getSelectedBoard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.CreatePlayerRequest} returns this
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.setSelectedBoard = function(value) {
  return jspb.Message.setProto3StringField(this, 26, value);
};


/**
 * optional string selected_board_upgrades = 34;
 * @return {string}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.getSelectedBoardUpgrades = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.CreatePlayerRequest} returns this
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.setSelectedBoardUpgrades = function(value) {
  return jspb.Message.setProto3StringField(this, 34, value);
};


/**
 * optional string selected_character = 18;
 * @return {string}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.getSelectedCharacter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.CreatePlayerRequest} returns this
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.setSelectedCharacter = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string selected_country = 42;
 * @return {string}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.getSelectedCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 42, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.CreatePlayerRequest} returns this
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.setSelectedCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 42, value);
};


/**
 * optional string selected_background = 50;
 * @return {string}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.getSelectedBackground = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.CreatePlayerRequest} returns this
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.setSelectedBackground = function(value) {
  return jspb.Message.setProto3StringField(this, 50, value);
};


/**
 * optional string selected_frame = 58;
 * @return {string}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.getSelectedFrame = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 58, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.CreatePlayerRequest} returns this
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.setSelectedFrame = function(value) {
  return jspb.Message.setProto3StringField(this, 58, value);
};


/**
 * optional string selected_portrait = 66;
 * @return {string}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.getSelectedPortrait = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 66, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.CreatePlayerRequest} returns this
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.setSelectedPortrait = function(value) {
  return jspb.Message.setProto3StringField(this, 66, value);
};


/**
 * optional int32 stat_total_visited_destinations = 76;
 * @return {number}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.getStatTotalVisitedDestinations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 76, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.CreatePlayerRequest} returns this
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.setStatTotalVisitedDestinations = function(value) {
  return jspb.Message.setProto3IntField(this, 76, value);
};


/**
 * optional int32 stat_total_games = 80;
 * @return {number}
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.getStatTotalGames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 80, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.CreatePlayerRequest} returns this
 */
proto.player.ext.v1.CreatePlayerRequest.prototype.setStatTotalGames = function(value) {
  return jspb.Message.setProto3IntField(this, 80, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.UserData.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.UserData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.UserData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.UserData.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
tag: jspb.Message.getFieldWithDefault(msg, 2, ""),
level: jspb.Message.getFieldWithDefault(msg, 3, 0),
highscore: jspb.Message.getFieldWithDefault(msg, 4, 0),
metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
createdAt: (f = msg.getCreatedAt()) && proto.player.ext.v1.Time.toObject(includeInstance, f),
updatePlayerAt: (f = msg.getUpdatePlayerAt()) && proto.player.ext.v1.Time.toObject(includeInstance, f),
nameChangedAt: (f = msg.getNameChangedAt()) && proto.player.ext.v1.Time.toObject(includeInstance, f),
uuid: jspb.Message.getFieldWithDefault(msg, 9, ""),
nameChangeExpiresAt: (f = msg.getNameChangeExpiresAt()) && proto.player.ext.v1.Time.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.UserData}
 */
proto.player.ext.v1.UserData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.UserData;
  return proto.player.ext.v1.UserData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.UserData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.UserData}
 */
proto.player.ext.v1.UserData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHighscore(value);
      break;
    case 5:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 6:
      var value = new proto.player.ext.v1.Time;
      reader.readMessage(value,proto.player.ext.v1.Time.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 7:
      var value = new proto.player.ext.v1.Time;
      reader.readMessage(value,proto.player.ext.v1.Time.deserializeBinaryFromReader);
      msg.setUpdatePlayerAt(value);
      break;
    case 8:
      var value = new proto.player.ext.v1.Time;
      reader.readMessage(value,proto.player.ext.v1.Time.deserializeBinaryFromReader);
      msg.setNameChangedAt(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 10:
      var value = new proto.player.ext.v1.Time;
      reader.readMessage(value,proto.player.ext.v1.Time.deserializeBinaryFromReader);
      msg.setNameChangeExpiresAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.UserData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.UserData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.UserData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.UserData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHighscore();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.player.ext.v1.Time.serializeBinaryToWriter
    );
  }
  f = message.getUpdatePlayerAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.player.ext.v1.Time.serializeBinaryToWriter
    );
  }
  f = message.getNameChangedAt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.player.ext.v1.Time.serializeBinaryToWriter
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getNameChangeExpiresAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.player.ext.v1.Time.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.ext.v1.UserData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.UserData} returns this
 */
proto.player.ext.v1.UserData.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tag = 2;
 * @return {string}
 */
proto.player.ext.v1.UserData.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.UserData} returns this
 */
proto.player.ext.v1.UserData.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 level = 3;
 * @return {number}
 */
proto.player.ext.v1.UserData.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.UserData} returns this
 */
proto.player.ext.v1.UserData.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 highscore = 4;
 * @return {number}
 */
proto.player.ext.v1.UserData.prototype.getHighscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.UserData} returns this
 */
proto.player.ext.v1.UserData.prototype.setHighscore = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * map<string, string> metadata = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.player.ext.v1.UserData.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.player.ext.v1.UserData} returns this
 */
proto.player.ext.v1.UserData.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;
};


/**
 * optional Time created_at = 6;
 * @return {?proto.player.ext.v1.Time}
 */
proto.player.ext.v1.UserData.prototype.getCreatedAt = function() {
  return /** @type{?proto.player.ext.v1.Time} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.Time, 6));
};


/**
 * @param {?proto.player.ext.v1.Time|undefined} value
 * @return {!proto.player.ext.v1.UserData} returns this
*/
proto.player.ext.v1.UserData.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.UserData} returns this
 */
proto.player.ext.v1.UserData.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.UserData.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Time update_player_at = 7;
 * @return {?proto.player.ext.v1.Time}
 */
proto.player.ext.v1.UserData.prototype.getUpdatePlayerAt = function() {
  return /** @type{?proto.player.ext.v1.Time} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.Time, 7));
};


/**
 * @param {?proto.player.ext.v1.Time|undefined} value
 * @return {!proto.player.ext.v1.UserData} returns this
*/
proto.player.ext.v1.UserData.prototype.setUpdatePlayerAt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.UserData} returns this
 */
proto.player.ext.v1.UserData.prototype.clearUpdatePlayerAt = function() {
  return this.setUpdatePlayerAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.UserData.prototype.hasUpdatePlayerAt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Time name_changed_at = 8;
 * @return {?proto.player.ext.v1.Time}
 */
proto.player.ext.v1.UserData.prototype.getNameChangedAt = function() {
  return /** @type{?proto.player.ext.v1.Time} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.Time, 8));
};


/**
 * @param {?proto.player.ext.v1.Time|undefined} value
 * @return {!proto.player.ext.v1.UserData} returns this
*/
proto.player.ext.v1.UserData.prototype.setNameChangedAt = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.UserData} returns this
 */
proto.player.ext.v1.UserData.prototype.clearNameChangedAt = function() {
  return this.setNameChangedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.UserData.prototype.hasNameChangedAt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string uuid = 9;
 * @return {string}
 */
proto.player.ext.v1.UserData.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.UserData} returns this
 */
proto.player.ext.v1.UserData.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional Time name_change_expires_at = 10;
 * @return {?proto.player.ext.v1.Time}
 */
proto.player.ext.v1.UserData.prototype.getNameChangeExpiresAt = function() {
  return /** @type{?proto.player.ext.v1.Time} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.Time, 10));
};


/**
 * @param {?proto.player.ext.v1.Time|undefined} value
 * @return {!proto.player.ext.v1.UserData} returns this
*/
proto.player.ext.v1.UserData.prototype.setNameChangeExpiresAt = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.UserData} returns this
 */
proto.player.ext.v1.UserData.prototype.clearNameChangeExpiresAt = function() {
  return this.setNameChangeExpiresAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.UserData.prototype.hasNameChangeExpiresAt = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.PlayerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.PlayerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.PlayerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.PlayerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
userData: (f = msg.getUserData()) && proto.player.ext.v1.UserData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.PlayerResponse}
 */
proto.player.ext.v1.PlayerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.PlayerResponse;
  return proto.player.ext.v1.PlayerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.PlayerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.PlayerResponse}
 */
proto.player.ext.v1.PlayerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.ext.v1.UserData;
      reader.readMessage(value,proto.player.ext.v1.UserData.deserializeBinaryFromReader);
      msg.setUserData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.PlayerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.PlayerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.PlayerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.PlayerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.player.ext.v1.UserData.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserData user_data = 1;
 * @return {?proto.player.ext.v1.UserData}
 */
proto.player.ext.v1.PlayerResponse.prototype.getUserData = function() {
  return /** @type{?proto.player.ext.v1.UserData} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.UserData, 1));
};


/**
 * @param {?proto.player.ext.v1.UserData|undefined} value
 * @return {!proto.player.ext.v1.PlayerResponse} returns this
*/
proto.player.ext.v1.PlayerResponse.prototype.setUserData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.PlayerResponse} returns this
 */
proto.player.ext.v1.PlayerResponse.prototype.clearUserData = function() {
  return this.setUserData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.PlayerResponse.prototype.hasUserData = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.InviteUserUuid.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.InviteUserUuid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.InviteUserUuid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.InviteUserUuid.toObject = function(includeInstance, msg) {
  var f, obj = {
userUuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.InviteUserUuid}
 */
proto.player.ext.v1.InviteUserUuid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.InviteUserUuid;
  return proto.player.ext.v1.InviteUserUuid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.InviteUserUuid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.InviteUserUuid}
 */
proto.player.ext.v1.InviteUserUuid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.InviteUserUuid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.InviteUserUuid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.InviteUserUuid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.InviteUserUuid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_uuid = 1;
 * @return {string}
 */
proto.player.ext.v1.InviteUserUuid.prototype.getUserUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.InviteUserUuid} returns this
 */
proto.player.ext.v1.InviteUserUuid.prototype.setUserUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.ReceivedInvite.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.ReceivedInvite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.ReceivedInvite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.ReceivedInvite.toObject = function(includeInstance, msg) {
  var f, obj = {
actionUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
receivedUuid: (f = msg.getReceivedUuid()) && proto.player.ext.v1.InviteUserUuid.toObject(includeInstance, f),
userInfo: (f = msg.getUserInfo()) && proto.player.ext.v1.UserInfo.toObject(includeInstance, f),
invitedAt: (f = msg.getInvitedAt()) && proto.player.ext.v1.Time.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.ReceivedInvite}
 */
proto.player.ext.v1.ReceivedInvite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.ReceivedInvite;
  return proto.player.ext.v1.ReceivedInvite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.ReceivedInvite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.ReceivedInvite}
 */
proto.player.ext.v1.ReceivedInvite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionUuid(value);
      break;
    case 2:
      var value = new proto.player.ext.v1.InviteUserUuid;
      reader.readMessage(value,proto.player.ext.v1.InviteUserUuid.deserializeBinaryFromReader);
      msg.setReceivedUuid(value);
      break;
    case 3:
      var value = new proto.player.ext.v1.UserInfo;
      reader.readMessage(value,proto.player.ext.v1.UserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 4:
      var value = new proto.player.ext.v1.Time;
      reader.readMessage(value,proto.player.ext.v1.Time.deserializeBinaryFromReader);
      msg.setInvitedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.ReceivedInvite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.ReceivedInvite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.ReceivedInvite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.ReceivedInvite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReceivedUuid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.player.ext.v1.InviteUserUuid.serializeBinaryToWriter
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.player.ext.v1.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getInvitedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.player.ext.v1.Time.serializeBinaryToWriter
    );
  }
};


/**
 * optional string action_uuid = 1;
 * @return {string}
 */
proto.player.ext.v1.ReceivedInvite.prototype.getActionUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.ReceivedInvite} returns this
 */
proto.player.ext.v1.ReceivedInvite.prototype.setActionUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional InviteUserUuid received_uuid = 2;
 * @return {?proto.player.ext.v1.InviteUserUuid}
 */
proto.player.ext.v1.ReceivedInvite.prototype.getReceivedUuid = function() {
  return /** @type{?proto.player.ext.v1.InviteUserUuid} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.InviteUserUuid, 2));
};


/**
 * @param {?proto.player.ext.v1.InviteUserUuid|undefined} value
 * @return {!proto.player.ext.v1.ReceivedInvite} returns this
*/
proto.player.ext.v1.ReceivedInvite.prototype.setReceivedUuid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.ReceivedInvite} returns this
 */
proto.player.ext.v1.ReceivedInvite.prototype.clearReceivedUuid = function() {
  return this.setReceivedUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.ReceivedInvite.prototype.hasReceivedUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UserInfo user_info = 3;
 * @return {?proto.player.ext.v1.UserInfo}
 */
proto.player.ext.v1.ReceivedInvite.prototype.getUserInfo = function() {
  return /** @type{?proto.player.ext.v1.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.UserInfo, 3));
};


/**
 * @param {?proto.player.ext.v1.UserInfo|undefined} value
 * @return {!proto.player.ext.v1.ReceivedInvite} returns this
*/
proto.player.ext.v1.ReceivedInvite.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.ReceivedInvite} returns this
 */
proto.player.ext.v1.ReceivedInvite.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.ReceivedInvite.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Time invited_at = 4;
 * @return {?proto.player.ext.v1.Time}
 */
proto.player.ext.v1.ReceivedInvite.prototype.getInvitedAt = function() {
  return /** @type{?proto.player.ext.v1.Time} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.Time, 4));
};


/**
 * @param {?proto.player.ext.v1.Time|undefined} value
 * @return {!proto.player.ext.v1.ReceivedInvite} returns this
*/
proto.player.ext.v1.ReceivedInvite.prototype.setInvitedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.ReceivedInvite} returns this
 */
proto.player.ext.v1.ReceivedInvite.prototype.clearInvitedAt = function() {
  return this.setInvitedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.ReceivedInvite.prototype.hasInvitedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.SendInvite.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.SendInvite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.SendInvite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.SendInvite.toObject = function(includeInstance, msg) {
  var f, obj = {
actionUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
userInfo: (f = msg.getUserInfo()) && proto.player.ext.v1.UserInfo.toObject(includeInstance, f),
receivedUuid: (f = msg.getReceivedUuid()) && proto.player.ext.v1.InviteUserUuid.toObject(includeInstance, f),
invitedAt: (f = msg.getInvitedAt()) && proto.player.ext.v1.Time.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.SendInvite}
 */
proto.player.ext.v1.SendInvite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.SendInvite;
  return proto.player.ext.v1.SendInvite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.SendInvite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.SendInvite}
 */
proto.player.ext.v1.SendInvite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionUuid(value);
      break;
    case 2:
      var value = new proto.player.ext.v1.UserInfo;
      reader.readMessage(value,proto.player.ext.v1.UserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 3:
      var value = new proto.player.ext.v1.InviteUserUuid;
      reader.readMessage(value,proto.player.ext.v1.InviteUserUuid.deserializeBinaryFromReader);
      msg.setReceivedUuid(value);
      break;
    case 4:
      var value = new proto.player.ext.v1.Time;
      reader.readMessage(value,proto.player.ext.v1.Time.deserializeBinaryFromReader);
      msg.setInvitedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.SendInvite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.SendInvite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.SendInvite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.SendInvite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.player.ext.v1.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getReceivedUuid();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.player.ext.v1.InviteUserUuid.serializeBinaryToWriter
    );
  }
  f = message.getInvitedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.player.ext.v1.Time.serializeBinaryToWriter
    );
  }
};


/**
 * optional string action_uuid = 1;
 * @return {string}
 */
proto.player.ext.v1.SendInvite.prototype.getActionUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.SendInvite} returns this
 */
proto.player.ext.v1.SendInvite.prototype.setActionUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UserInfo user_info = 2;
 * @return {?proto.player.ext.v1.UserInfo}
 */
proto.player.ext.v1.SendInvite.prototype.getUserInfo = function() {
  return /** @type{?proto.player.ext.v1.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.UserInfo, 2));
};


/**
 * @param {?proto.player.ext.v1.UserInfo|undefined} value
 * @return {!proto.player.ext.v1.SendInvite} returns this
*/
proto.player.ext.v1.SendInvite.prototype.setUserInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.SendInvite} returns this
 */
proto.player.ext.v1.SendInvite.prototype.clearUserInfo = function() {
  return this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.SendInvite.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InviteUserUuid received_uuid = 3;
 * @return {?proto.player.ext.v1.InviteUserUuid}
 */
proto.player.ext.v1.SendInvite.prototype.getReceivedUuid = function() {
  return /** @type{?proto.player.ext.v1.InviteUserUuid} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.InviteUserUuid, 3));
};


/**
 * @param {?proto.player.ext.v1.InviteUserUuid|undefined} value
 * @return {!proto.player.ext.v1.SendInvite} returns this
*/
proto.player.ext.v1.SendInvite.prototype.setReceivedUuid = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.SendInvite} returns this
 */
proto.player.ext.v1.SendInvite.prototype.clearReceivedUuid = function() {
  return this.setReceivedUuid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.SendInvite.prototype.hasReceivedUuid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Time invited_at = 4;
 * @return {?proto.player.ext.v1.Time}
 */
proto.player.ext.v1.SendInvite.prototype.getInvitedAt = function() {
  return /** @type{?proto.player.ext.v1.Time} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.Time, 4));
};


/**
 * @param {?proto.player.ext.v1.Time|undefined} value
 * @return {!proto.player.ext.v1.SendInvite} returns this
*/
proto.player.ext.v1.SendInvite.prototype.setInvitedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.SendInvite} returns this
 */
proto.player.ext.v1.SendInvite.prototype.clearInvitedAt = function() {
  return this.setInvitedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.SendInvite.prototype.hasInvitedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.player.ext.v1.GetInvitesResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.GetInvitesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.GetInvitesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.GetInvitesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.GetInvitesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
receivedInvitesList: jspb.Message.toObjectList(msg.getReceivedInvitesList(),
    proto.player.ext.v1.ReceivedInvite.toObject, includeInstance),
sentInvitesList: jspb.Message.toObjectList(msg.getSentInvitesList(),
    proto.player.ext.v1.SendInvite.toObject, includeInstance),
quota: (f = msg.getQuota()) && proto.player.ext.v1.InviteQuota.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.GetInvitesResponse}
 */
proto.player.ext.v1.GetInvitesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.GetInvitesResponse;
  return proto.player.ext.v1.GetInvitesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.GetInvitesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.GetInvitesResponse}
 */
proto.player.ext.v1.GetInvitesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.ext.v1.ReceivedInvite;
      reader.readMessage(value,proto.player.ext.v1.ReceivedInvite.deserializeBinaryFromReader);
      msg.addReceivedInvites(value);
      break;
    case 2:
      var value = new proto.player.ext.v1.SendInvite;
      reader.readMessage(value,proto.player.ext.v1.SendInvite.deserializeBinaryFromReader);
      msg.addSentInvites(value);
      break;
    case 3:
      var value = new proto.player.ext.v1.InviteQuota;
      reader.readMessage(value,proto.player.ext.v1.InviteQuota.deserializeBinaryFromReader);
      msg.setQuota(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.GetInvitesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.GetInvitesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.GetInvitesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.GetInvitesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceivedInvitesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.player.ext.v1.ReceivedInvite.serializeBinaryToWriter
    );
  }
  f = message.getSentInvitesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.player.ext.v1.SendInvite.serializeBinaryToWriter
    );
  }
  f = message.getQuota();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.player.ext.v1.InviteQuota.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReceivedInvite received_invites = 1;
 * @return {!Array<!proto.player.ext.v1.ReceivedInvite>}
 */
proto.player.ext.v1.GetInvitesResponse.prototype.getReceivedInvitesList = function() {
  return /** @type{!Array<!proto.player.ext.v1.ReceivedInvite>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.ext.v1.ReceivedInvite, 1));
};


/**
 * @param {!Array<!proto.player.ext.v1.ReceivedInvite>} value
 * @return {!proto.player.ext.v1.GetInvitesResponse} returns this
*/
proto.player.ext.v1.GetInvitesResponse.prototype.setReceivedInvitesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.player.ext.v1.ReceivedInvite=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.ext.v1.ReceivedInvite}
 */
proto.player.ext.v1.GetInvitesResponse.prototype.addReceivedInvites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.player.ext.v1.ReceivedInvite, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.ext.v1.GetInvitesResponse} returns this
 */
proto.player.ext.v1.GetInvitesResponse.prototype.clearReceivedInvitesList = function() {
  return this.setReceivedInvitesList([]);
};


/**
 * repeated SendInvite sent_invites = 2;
 * @return {!Array<!proto.player.ext.v1.SendInvite>}
 */
proto.player.ext.v1.GetInvitesResponse.prototype.getSentInvitesList = function() {
  return /** @type{!Array<!proto.player.ext.v1.SendInvite>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.ext.v1.SendInvite, 2));
};


/**
 * @param {!Array<!proto.player.ext.v1.SendInvite>} value
 * @return {!proto.player.ext.v1.GetInvitesResponse} returns this
*/
proto.player.ext.v1.GetInvitesResponse.prototype.setSentInvitesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.player.ext.v1.SendInvite=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.ext.v1.SendInvite}
 */
proto.player.ext.v1.GetInvitesResponse.prototype.addSentInvites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.player.ext.v1.SendInvite, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.ext.v1.GetInvitesResponse} returns this
 */
proto.player.ext.v1.GetInvitesResponse.prototype.clearSentInvitesList = function() {
  return this.setSentInvitesList([]);
};


/**
 * optional InviteQuota quota = 3;
 * @return {?proto.player.ext.v1.InviteQuota}
 */
proto.player.ext.v1.GetInvitesResponse.prototype.getQuota = function() {
  return /** @type{?proto.player.ext.v1.InviteQuota} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.InviteQuota, 3));
};


/**
 * @param {?proto.player.ext.v1.InviteQuota|undefined} value
 * @return {!proto.player.ext.v1.GetInvitesResponse} returns this
*/
proto.player.ext.v1.GetInvitesResponse.prototype.setQuota = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.GetInvitesResponse} returns this
 */
proto.player.ext.v1.GetInvitesResponse.prototype.clearQuota = function() {
  return this.setQuota(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.GetInvitesResponse.prototype.hasQuota = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.SendInviteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.SendInviteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.SendInviteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.SendInviteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
userInvite: (f = msg.getUserInvite()) && proto.player.ext.v1.SendInviteResponse.UserInvite.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.SendInviteResponse}
 */
proto.player.ext.v1.SendInviteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.SendInviteResponse;
  return proto.player.ext.v1.SendInviteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.SendInviteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.SendInviteResponse}
 */
proto.player.ext.v1.SendInviteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.ext.v1.SendInviteResponse.UserInvite;
      reader.readMessage(value,proto.player.ext.v1.SendInviteResponse.UserInvite.deserializeBinaryFromReader);
      msg.setUserInvite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.SendInviteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.SendInviteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.SendInviteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.SendInviteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserInvite();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.player.ext.v1.SendInviteResponse.UserInvite.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.SendInviteResponse.UserInvite.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.SendInviteResponse.UserInvite} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.toObject = function(includeInstance, msg) {
  var f, obj = {
actionUuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
invited: (f = msg.getInvited()) && proto.player.ext.v1.UserInfo.toObject(includeInstance, f),
inviter: (f = msg.getInviter()) && proto.player.ext.v1.UserInfo.toObject(includeInstance, f),
invitedAt: (f = msg.getInvitedAt()) && proto.player.ext.v1.Time.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.SendInviteResponse.UserInvite}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.SendInviteResponse.UserInvite;
  return proto.player.ext.v1.SendInviteResponse.UserInvite.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.SendInviteResponse.UserInvite} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.SendInviteResponse.UserInvite}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionUuid(value);
      break;
    case 2:
      var value = new proto.player.ext.v1.UserInfo;
      reader.readMessage(value,proto.player.ext.v1.UserInfo.deserializeBinaryFromReader);
      msg.setInvited(value);
      break;
    case 3:
      var value = new proto.player.ext.v1.UserInfo;
      reader.readMessage(value,proto.player.ext.v1.UserInfo.deserializeBinaryFromReader);
      msg.setInviter(value);
      break;
    case 4:
      var value = new proto.player.ext.v1.Time;
      reader.readMessage(value,proto.player.ext.v1.Time.deserializeBinaryFromReader);
      msg.setInvitedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.SendInviteResponse.UserInvite.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.SendInviteResponse.UserInvite} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInvited();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.player.ext.v1.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getInviter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.player.ext.v1.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getInvitedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.player.ext.v1.Time.serializeBinaryToWriter
    );
  }
};


/**
 * optional string action_uuid = 1;
 * @return {string}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.getActionUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.SendInviteResponse.UserInvite} returns this
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.setActionUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional UserInfo invited = 2;
 * @return {?proto.player.ext.v1.UserInfo}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.getInvited = function() {
  return /** @type{?proto.player.ext.v1.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.UserInfo, 2));
};


/**
 * @param {?proto.player.ext.v1.UserInfo|undefined} value
 * @return {!proto.player.ext.v1.SendInviteResponse.UserInvite} returns this
*/
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.setInvited = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.SendInviteResponse.UserInvite} returns this
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.clearInvited = function() {
  return this.setInvited(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.hasInvited = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UserInfo inviter = 3;
 * @return {?proto.player.ext.v1.UserInfo}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.getInviter = function() {
  return /** @type{?proto.player.ext.v1.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.UserInfo, 3));
};


/**
 * @param {?proto.player.ext.v1.UserInfo|undefined} value
 * @return {!proto.player.ext.v1.SendInviteResponse.UserInvite} returns this
*/
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.setInviter = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.SendInviteResponse.UserInvite} returns this
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.clearInviter = function() {
  return this.setInviter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.hasInviter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Time invited_at = 4;
 * @return {?proto.player.ext.v1.Time}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.getInvitedAt = function() {
  return /** @type{?proto.player.ext.v1.Time} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.Time, 4));
};


/**
 * @param {?proto.player.ext.v1.Time|undefined} value
 * @return {!proto.player.ext.v1.SendInviteResponse.UserInvite} returns this
*/
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.setInvitedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.SendInviteResponse.UserInvite} returns this
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.clearInvitedAt = function() {
  return this.setInvitedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.SendInviteResponse.UserInvite.prototype.hasInvitedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UserInvite user_invite = 1;
 * @return {?proto.player.ext.v1.SendInviteResponse.UserInvite}
 */
proto.player.ext.v1.SendInviteResponse.prototype.getUserInvite = function() {
  return /** @type{?proto.player.ext.v1.SendInviteResponse.UserInvite} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.SendInviteResponse.UserInvite, 1));
};


/**
 * @param {?proto.player.ext.v1.SendInviteResponse.UserInvite|undefined} value
 * @return {!proto.player.ext.v1.SendInviteResponse} returns this
*/
proto.player.ext.v1.SendInviteResponse.prototype.setUserInvite = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.SendInviteResponse} returns this
 */
proto.player.ext.v1.SendInviteResponse.prototype.clearUserInvite = function() {
  return this.setUserInvite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.SendInviteResponse.prototype.hasUserInvite = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.player.ext.v1.GetFriendsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.GetFriendsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.GetFriendsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.GetFriendsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.GetFriendsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
friendList: jspb.Message.toObjectList(msg.getFriendList(),
    proto.player.ext.v1.UserInfo.toObject, includeInstance),
quota: (f = msg.getQuota()) && proto.player.ext.v1.InviteQuota.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.GetFriendsResponse}
 */
proto.player.ext.v1.GetFriendsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.GetFriendsResponse;
  return proto.player.ext.v1.GetFriendsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.GetFriendsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.GetFriendsResponse}
 */
proto.player.ext.v1.GetFriendsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.ext.v1.UserInfo;
      reader.readMessage(value,proto.player.ext.v1.UserInfo.deserializeBinaryFromReader);
      msg.addFriend(value);
      break;
    case 2:
      var value = new proto.player.ext.v1.InviteQuota;
      reader.readMessage(value,proto.player.ext.v1.InviteQuota.deserializeBinaryFromReader);
      msg.setQuota(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.GetFriendsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.GetFriendsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.GetFriendsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.GetFriendsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.player.ext.v1.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getQuota();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.player.ext.v1.InviteQuota.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserInfo friend = 1;
 * @return {!Array<!proto.player.ext.v1.UserInfo>}
 */
proto.player.ext.v1.GetFriendsResponse.prototype.getFriendList = function() {
  return /** @type{!Array<!proto.player.ext.v1.UserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.ext.v1.UserInfo, 1));
};


/**
 * @param {!Array<!proto.player.ext.v1.UserInfo>} value
 * @return {!proto.player.ext.v1.GetFriendsResponse} returns this
*/
proto.player.ext.v1.GetFriendsResponse.prototype.setFriendList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.player.ext.v1.UserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.ext.v1.UserInfo}
 */
proto.player.ext.v1.GetFriendsResponse.prototype.addFriend = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.player.ext.v1.UserInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.ext.v1.GetFriendsResponse} returns this
 */
proto.player.ext.v1.GetFriendsResponse.prototype.clearFriendList = function() {
  return this.setFriendList([]);
};


/**
 * optional InviteQuota quota = 2;
 * @return {?proto.player.ext.v1.InviteQuota}
 */
proto.player.ext.v1.GetFriendsResponse.prototype.getQuota = function() {
  return /** @type{?proto.player.ext.v1.InviteQuota} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.InviteQuota, 2));
};


/**
 * @param {?proto.player.ext.v1.InviteQuota|undefined} value
 * @return {!proto.player.ext.v1.GetFriendsResponse} returns this
*/
proto.player.ext.v1.GetFriendsResponse.prototype.setQuota = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.GetFriendsResponse} returns this
 */
proto.player.ext.v1.GetFriendsResponse.prototype.clearQuota = function() {
  return this.setQuota(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.GetFriendsResponse.prototype.hasQuota = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.UpdatePlayerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.UpdatePlayerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.UpdatePlayerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.UpdatePlayerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
level: jspb.Message.getFieldWithDefault(msg, 2, 0),
highscore: jspb.Message.getFieldWithDefault(msg, 3, 0),
metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.UpdatePlayerRequest}
 */
proto.player.ext.v1.UpdatePlayerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.UpdatePlayerRequest;
  return proto.player.ext.v1.UpdatePlayerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.UpdatePlayerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.UpdatePlayerRequest}
 */
proto.player.ext.v1.UpdatePlayerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHighscore(value);
      break;
    case 4:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.UpdatePlayerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.UpdatePlayerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.UpdatePlayerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.UpdatePlayerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHighscore();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.player.ext.v1.UpdatePlayerRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.player.ext.v1.UpdatePlayerRequest} returns this
 */
proto.player.ext.v1.UpdatePlayerRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 level = 2;
 * @return {number}
 */
proto.player.ext.v1.UpdatePlayerRequest.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.UpdatePlayerRequest} returns this
 */
proto.player.ext.v1.UpdatePlayerRequest.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 highscore = 3;
 * @return {number}
 */
proto.player.ext.v1.UpdatePlayerRequest.prototype.getHighscore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.UpdatePlayerRequest} returns this
 */
proto.player.ext.v1.UpdatePlayerRequest.prototype.setHighscore = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * map<string, string> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.player.ext.v1.UpdatePlayerRequest.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.player.ext.v1.UpdatePlayerRequest} returns this
 */
proto.player.ext.v1.UpdatePlayerRequest.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.StatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.StatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.StatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.StatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
status: (f = msg.getStatus()) && proto.player.ext.v1.StatusResponse.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.StatusResponse}
 */
proto.player.ext.v1.StatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.StatusResponse;
  return proto.player.ext.v1.StatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.StatusResponse}
 */
proto.player.ext.v1.StatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.ext.v1.StatusResponse.Status;
      reader.readMessage(value,proto.player.ext.v1.StatusResponse.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.StatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.StatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.StatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.player.ext.v1.StatusResponse.Status.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.StatusResponse.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.StatusResponse.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.StatusResponse.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.StatusResponse.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.StatusResponse.Status}
 */
proto.player.ext.v1.StatusResponse.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.StatusResponse.Status;
  return proto.player.ext.v1.StatusResponse.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.StatusResponse.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.StatusResponse.Status}
 */
proto.player.ext.v1.StatusResponse.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.StatusResponse.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.StatusResponse.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.StatusResponse.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.StatusResponse.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.player.ext.v1.StatusResponse.Status.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.player.ext.v1.StatusResponse.Status} returns this
 */
proto.player.ext.v1.StatusResponse.Status.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Status status = 1;
 * @return {?proto.player.ext.v1.StatusResponse.Status}
 */
proto.player.ext.v1.StatusResponse.prototype.getStatus = function() {
  return /** @type{?proto.player.ext.v1.StatusResponse.Status} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.StatusResponse.Status, 1));
};


/**
 * @param {?proto.player.ext.v1.StatusResponse.Status|undefined} value
 * @return {!proto.player.ext.v1.StatusResponse} returns this
*/
proto.player.ext.v1.StatusResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.StatusResponse} returns this
 */
proto.player.ext.v1.StatusResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.StatusResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.GetWalletResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.GetWalletResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.GetWalletResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.GetWalletResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
walletdata: (f = msg.getWalletdata()) && proto.player.ext.v1.GetWalletResponse.WalletData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.GetWalletResponse}
 */
proto.player.ext.v1.GetWalletResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.GetWalletResponse;
  return proto.player.ext.v1.GetWalletResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.GetWalletResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.GetWalletResponse}
 */
proto.player.ext.v1.GetWalletResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.ext.v1.GetWalletResponse.WalletData;
      reader.readMessage(value,proto.player.ext.v1.GetWalletResponse.WalletData.deserializeBinaryFromReader);
      msg.setWalletdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.GetWalletResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.GetWalletResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.GetWalletResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.GetWalletResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletdata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.player.ext.v1.GetWalletResponse.WalletData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.GetWalletResponse.WalletData.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.GetWalletResponse.WalletData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.GetWalletResponse.WalletData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.GetWalletResponse.WalletData.toObject = function(includeInstance, msg) {
  var f, obj = {
walletLastSaveAt: (f = msg.getWalletLastSaveAt()) && proto.player.ext.v1.Time.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.GetWalletResponse.WalletData}
 */
proto.player.ext.v1.GetWalletResponse.WalletData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.GetWalletResponse.WalletData;
  return proto.player.ext.v1.GetWalletResponse.WalletData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.GetWalletResponse.WalletData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.GetWalletResponse.WalletData}
 */
proto.player.ext.v1.GetWalletResponse.WalletData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.player.ext.v1.Time;
      reader.readMessage(value,proto.player.ext.v1.Time.deserializeBinaryFromReader);
      msg.setWalletLastSaveAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.GetWalletResponse.WalletData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.GetWalletResponse.WalletData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.GetWalletResponse.WalletData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.GetWalletResponse.WalletData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletLastSaveAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.player.ext.v1.Time.serializeBinaryToWriter
    );
  }
};


/**
 * optional Time wallet_last_save_at = 2;
 * @return {?proto.player.ext.v1.Time}
 */
proto.player.ext.v1.GetWalletResponse.WalletData.prototype.getWalletLastSaveAt = function() {
  return /** @type{?proto.player.ext.v1.Time} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.Time, 2));
};


/**
 * @param {?proto.player.ext.v1.Time|undefined} value
 * @return {!proto.player.ext.v1.GetWalletResponse.WalletData} returns this
*/
proto.player.ext.v1.GetWalletResponse.WalletData.prototype.setWalletLastSaveAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.GetWalletResponse.WalletData} returns this
 */
proto.player.ext.v1.GetWalletResponse.WalletData.prototype.clearWalletLastSaveAt = function() {
  return this.setWalletLastSaveAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.GetWalletResponse.WalletData.prototype.hasWalletLastSaveAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WalletData walletdata = 1;
 * @return {?proto.player.ext.v1.GetWalletResponse.WalletData}
 */
proto.player.ext.v1.GetWalletResponse.prototype.getWalletdata = function() {
  return /** @type{?proto.player.ext.v1.GetWalletResponse.WalletData} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.GetWalletResponse.WalletData, 1));
};


/**
 * @param {?proto.player.ext.v1.GetWalletResponse.WalletData|undefined} value
 * @return {!proto.player.ext.v1.GetWalletResponse} returns this
*/
proto.player.ext.v1.GetWalletResponse.prototype.setWalletdata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.GetWalletResponse} returns this
 */
proto.player.ext.v1.GetWalletResponse.prototype.clearWalletdata = function() {
  return this.setWalletdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.GetWalletResponse.prototype.hasWalletdata = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.GetFriendAndInvitesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.GetFriendAndInvitesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
friendsList: jspb.Message.toObjectList(msg.getFriendsList(),
    proto.player.ext.v1.UserInfo.toObject, includeInstance),
receivedInvitesList: jspb.Message.toObjectList(msg.getReceivedInvitesList(),
    proto.player.ext.v1.ReceivedInvite.toObject, includeInstance),
sentInvitesList: jspb.Message.toObjectList(msg.getSentInvitesList(),
    proto.player.ext.v1.SendInvite.toObject, includeInstance),
quota: (f = msg.getQuota()) && proto.player.ext.v1.InviteQuota.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.GetFriendAndInvitesResponse}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.GetFriendAndInvitesResponse;
  return proto.player.ext.v1.GetFriendAndInvitesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.GetFriendAndInvitesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.GetFriendAndInvitesResponse}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.ext.v1.UserInfo;
      reader.readMessage(value,proto.player.ext.v1.UserInfo.deserializeBinaryFromReader);
      msg.addFriends(value);
      break;
    case 2:
      var value = new proto.player.ext.v1.ReceivedInvite;
      reader.readMessage(value,proto.player.ext.v1.ReceivedInvite.deserializeBinaryFromReader);
      msg.addReceivedInvites(value);
      break;
    case 3:
      var value = new proto.player.ext.v1.SendInvite;
      reader.readMessage(value,proto.player.ext.v1.SendInvite.deserializeBinaryFromReader);
      msg.addSentInvites(value);
      break;
    case 4:
      var value = new proto.player.ext.v1.InviteQuota;
      reader.readMessage(value,proto.player.ext.v1.InviteQuota.deserializeBinaryFromReader);
      msg.setQuota(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.GetFriendAndInvitesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.GetFriendAndInvitesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFriendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.player.ext.v1.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getReceivedInvitesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.player.ext.v1.ReceivedInvite.serializeBinaryToWriter
    );
  }
  f = message.getSentInvitesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.player.ext.v1.SendInvite.serializeBinaryToWriter
    );
  }
  f = message.getQuota();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.player.ext.v1.InviteQuota.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserInfo friends = 1;
 * @return {!Array<!proto.player.ext.v1.UserInfo>}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.getFriendsList = function() {
  return /** @type{!Array<!proto.player.ext.v1.UserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.ext.v1.UserInfo, 1));
};


/**
 * @param {!Array<!proto.player.ext.v1.UserInfo>} value
 * @return {!proto.player.ext.v1.GetFriendAndInvitesResponse} returns this
*/
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.setFriendsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.player.ext.v1.UserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.ext.v1.UserInfo}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.addFriends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.player.ext.v1.UserInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.ext.v1.GetFriendAndInvitesResponse} returns this
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.clearFriendsList = function() {
  return this.setFriendsList([]);
};


/**
 * repeated ReceivedInvite received_invites = 2;
 * @return {!Array<!proto.player.ext.v1.ReceivedInvite>}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.getReceivedInvitesList = function() {
  return /** @type{!Array<!proto.player.ext.v1.ReceivedInvite>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.ext.v1.ReceivedInvite, 2));
};


/**
 * @param {!Array<!proto.player.ext.v1.ReceivedInvite>} value
 * @return {!proto.player.ext.v1.GetFriendAndInvitesResponse} returns this
*/
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.setReceivedInvitesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.player.ext.v1.ReceivedInvite=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.ext.v1.ReceivedInvite}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.addReceivedInvites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.player.ext.v1.ReceivedInvite, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.ext.v1.GetFriendAndInvitesResponse} returns this
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.clearReceivedInvitesList = function() {
  return this.setReceivedInvitesList([]);
};


/**
 * repeated SendInvite sent_invites = 3;
 * @return {!Array<!proto.player.ext.v1.SendInvite>}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.getSentInvitesList = function() {
  return /** @type{!Array<!proto.player.ext.v1.SendInvite>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.ext.v1.SendInvite, 3));
};


/**
 * @param {!Array<!proto.player.ext.v1.SendInvite>} value
 * @return {!proto.player.ext.v1.GetFriendAndInvitesResponse} returns this
*/
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.setSentInvitesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.player.ext.v1.SendInvite=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.ext.v1.SendInvite}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.addSentInvites = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.player.ext.v1.SendInvite, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.ext.v1.GetFriendAndInvitesResponse} returns this
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.clearSentInvitesList = function() {
  return this.setSentInvitesList([]);
};


/**
 * optional InviteQuota quota = 4;
 * @return {?proto.player.ext.v1.InviteQuota}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.getQuota = function() {
  return /** @type{?proto.player.ext.v1.InviteQuota} */ (
    jspb.Message.getWrapperField(this, proto.player.ext.v1.InviteQuota, 4));
};


/**
 * @param {?proto.player.ext.v1.InviteQuota|undefined} value
 * @return {!proto.player.ext.v1.GetFriendAndInvitesResponse} returns this
*/
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.setQuota = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.player.ext.v1.GetFriendAndInvitesResponse} returns this
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.clearQuota = function() {
  return this.setQuota(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.player.ext.v1.GetFriendAndInvitesResponse.prototype.hasQuota = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.player.ext.v1.MatchPlayerResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.player.ext.v1.MatchPlayerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.player.ext.v1.MatchPlayerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.player.ext.v1.MatchPlayerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.MatchPlayerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
playerList: jspb.Message.toObjectList(msg.getPlayerList(),
    proto.player.ext.v1.UserData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.player.ext.v1.MatchPlayerResponse}
 */
proto.player.ext.v1.MatchPlayerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.player.ext.v1.MatchPlayerResponse;
  return proto.player.ext.v1.MatchPlayerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.player.ext.v1.MatchPlayerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.player.ext.v1.MatchPlayerResponse}
 */
proto.player.ext.v1.MatchPlayerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.player.ext.v1.UserData;
      reader.readMessage(value,proto.player.ext.v1.UserData.deserializeBinaryFromReader);
      msg.addPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.player.ext.v1.MatchPlayerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.player.ext.v1.MatchPlayerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.player.ext.v1.MatchPlayerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.player.ext.v1.MatchPlayerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.player.ext.v1.UserData.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserData player = 1;
 * @return {!Array<!proto.player.ext.v1.UserData>}
 */
proto.player.ext.v1.MatchPlayerResponse.prototype.getPlayerList = function() {
  return /** @type{!Array<!proto.player.ext.v1.UserData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.player.ext.v1.UserData, 1));
};


/**
 * @param {!Array<!proto.player.ext.v1.UserData>} value
 * @return {!proto.player.ext.v1.MatchPlayerResponse} returns this
*/
proto.player.ext.v1.MatchPlayerResponse.prototype.setPlayerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.player.ext.v1.UserData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.player.ext.v1.UserData}
 */
proto.player.ext.v1.MatchPlayerResponse.prototype.addPlayer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.player.ext.v1.UserData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.player.ext.v1.MatchPlayerResponse} returns this
 */
proto.player.ext.v1.MatchPlayerResponse.prototype.clearPlayerList = function() {
  return this.setPlayerList([]);
};


